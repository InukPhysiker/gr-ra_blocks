# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ra_blocks_swig', [dirname(__file__)])
        except ImportError:
            import _ra_blocks_swig
            return _ra_blocks_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_ra_blocks_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ra_blocks_swig = swig_import_helper()
    del swig_import_helper
else:
    import _ra_blocks_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ra_blocks_swig.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _ra_blocks_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        """incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _ra_blocks_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _ra_blocks_swig.SwigPyIterator_decr(self, n)

    def distance(self, *args, **kwargs):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _ra_blocks_swig.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _ra_blocks_swig.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _ra_blocks_swig.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _ra_blocks_swig.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _ra_blocks_swig.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _ra_blocks_swig.SwigPyIterator_previous(self)

    def advance(self, *args, **kwargs):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _ra_blocks_swig.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _ra_blocks_swig.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _ra_blocks_swig.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _ra_blocks_swig.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _ra_blocks_swig.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _ra_blocks_swig.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _ra_blocks_swig.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _ra_blocks_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class slicer(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decim, float thresh) -> slicer_sptr

        Return a shared_ptr to a new instance of ra_blocks::slicer.

        To avoid accidental use of raw pointers, ra_blocks::slicer's constructor is in a private implementation class. ra_blocks::slicer::make is the public interface for creating new instances.

        Params: (decim, thresh)
        """
        return _ra_blocks_swig.slicer_make(*args, **kwargs)

    make = staticmethod(make)
    def set_thresh(self, *args, **kwargs):
        """
        set_thresh(slicer self, float thresh)

        Params: (thresh)
        """
        return _ra_blocks_swig.slicer_set_thresh(self, *args, **kwargs)

    __swig_destroy__ = _ra_blocks_swig.delete_slicer
    __del__ = lambda self : None;
slicer_swigregister = _ra_blocks_swig.slicer_swigregister
slicer_swigregister(slicer)

def slicer_make(*args, **kwargs):
  """
    slicer_make(int decim, float thresh) -> slicer_sptr

    Return a shared_ptr to a new instance of ra_blocks::slicer.

    To avoid accidental use of raw pointers, ra_blocks::slicer's constructor is in a private implementation class. ra_blocks::slicer::make is the public interface for creating new instances.

    Params: (decim, thresh)
    """
  return _ra_blocks_swig.slicer_make(*args, **kwargs)

class slicer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ra_blocks::slicer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ra_blocks::slicer)> self) -> slicer_sptr
        __init__(boost::shared_ptr<(gr::ra_blocks::slicer)> self, slicer p) -> slicer_sptr
        """
        this = _ra_blocks_swig.new_slicer_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(slicer_sptr self) -> slicer"""
        return _ra_blocks_swig.slicer_sptr___deref__(self)

    __swig_destroy__ = _ra_blocks_swig.delete_slicer_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(slicer_sptr self, int decim, float thresh) -> slicer_sptr

        Return a shared_ptr to a new instance of ra_blocks::slicer.

        To avoid accidental use of raw pointers, ra_blocks::slicer's constructor is in a private implementation class. ra_blocks::slicer::make is the public interface for creating new instances.

        Params: (decim, thresh)
        """
        return _ra_blocks_swig.slicer_sptr_make(self, *args, **kwargs)

    def set_thresh(self, *args, **kwargs):
        """
        set_thresh(slicer_sptr self, float thresh)

        Params: (thresh)
        """
        return _ra_blocks_swig.slicer_sptr_set_thresh(self, *args, **kwargs)

    def history(self):
        """history(slicer_sptr self) -> unsigned int"""
        return _ra_blocks_swig.slicer_sptr_history(self)

    def output_multiple(self):
        """output_multiple(slicer_sptr self) -> int"""
        return _ra_blocks_swig.slicer_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(slicer_sptr self) -> double"""
        return _ra_blocks_swig.slicer_sptr_relative_rate(self)

    def start(self):
        """start(slicer_sptr self) -> bool"""
        return _ra_blocks_swig.slicer_sptr_start(self)

    def stop(self):
        """stop(slicer_sptr self) -> bool"""
        return _ra_blocks_swig.slicer_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(slicer_sptr self, unsigned int which_input) -> uint64_t"""
        return _ra_blocks_swig.slicer_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(slicer_sptr self, unsigned int which_output) -> uint64_t"""
        return _ra_blocks_swig.slicer_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(slicer_sptr self) -> int"""
        return _ra_blocks_swig.slicer_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(slicer_sptr self, int m)"""
        return _ra_blocks_swig.slicer_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(slicer_sptr self)"""
        return _ra_blocks_swig.slicer_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(slicer_sptr self) -> bool"""
        return _ra_blocks_swig.slicer_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(slicer_sptr self, int i) -> long"""
        return _ra_blocks_swig.slicer_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(slicer_sptr self, long max_output_buffer)
        set_max_output_buffer(slicer_sptr self, int port, long max_output_buffer)
        """
        return _ra_blocks_swig.slicer_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(slicer_sptr self, int i) -> long"""
        return _ra_blocks_swig.slicer_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(slicer_sptr self, long min_output_buffer)
        set_min_output_buffer(slicer_sptr self, int port, long min_output_buffer)
        """
        return _ra_blocks_swig.slicer_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(slicer_sptr self) -> float"""
        return _ra_blocks_swig.slicer_sptr_pc_noutput_items(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(slicer_sptr self) -> float"""
        return _ra_blocks_swig.slicer_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(slicer_sptr self) -> float"""
        return _ra_blocks_swig.slicer_sptr_pc_nproduced(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(slicer_sptr self) -> float"""
        return _ra_blocks_swig.slicer_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(slicer_sptr self, int which) -> float
        pc_input_buffers_full(slicer_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.slicer_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(slicer_sptr self, int which) -> float
        pc_input_buffers_full_var(slicer_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.slicer_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(slicer_sptr self, int which) -> float
        pc_output_buffers_full(slicer_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.slicer_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(slicer_sptr self, int which) -> float
        pc_output_buffers_full_var(slicer_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.slicer_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(slicer_sptr self) -> float"""
        return _ra_blocks_swig.slicer_sptr_pc_work_time(self)

    def pc_work_time_var(self):
        """pc_work_time_var(slicer_sptr self) -> float"""
        return _ra_blocks_swig.slicer_sptr_pc_work_time_var(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(slicer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ra_blocks_swig.slicer_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(slicer_sptr self)"""
        return _ra_blocks_swig.slicer_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(slicer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ra_blocks_swig.slicer_sptr_processor_affinity(self)

    def detail(self):
        """detail(slicer_sptr self) -> gr_block_detail_sptr"""
        return _ra_blocks_swig.slicer_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(slicer_sptr self, gr_block_detail_sptr detail)"""
        return _ra_blocks_swig.slicer_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(slicer_sptr self) -> std::string"""
        return _ra_blocks_swig.slicer_sptr_name(self)

    def symbol_name(self):
        """symbol_name(slicer_sptr self) -> std::string"""
        return _ra_blocks_swig.slicer_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(slicer_sptr self) -> gr_io_signature_sptr"""
        return _ra_blocks_swig.slicer_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(slicer_sptr self) -> gr_io_signature_sptr"""
        return _ra_blocks_swig.slicer_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(slicer_sptr self) -> long"""
        return _ra_blocks_swig.slicer_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(slicer_sptr self) -> gr_basic_block_sptr"""
        return _ra_blocks_swig.slicer_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(slicer_sptr self, int ninputs, int noutputs) -> bool"""
        return _ra_blocks_swig.slicer_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(slicer_sptr self) -> std::string"""
        return _ra_blocks_swig.slicer_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(slicer_sptr self, std::string name)"""
        return _ra_blocks_swig.slicer_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(slicer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ra_blocks_swig.slicer_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(slicer_sptr self) -> swig_int_ptr"""
        return _ra_blocks_swig.slicer_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(slicer_sptr self) -> swig_int_ptr"""
        return _ra_blocks_swig.slicer_sptr_message_ports_out(self)

slicer_sptr_swigregister = _ra_blocks_swig.slicer_sptr_swigregister
slicer_sptr_swigregister(slicer_sptr)

slicer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
slicer = slicer.make;

class vector_power(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int vecsize, int nstream) -> vector_power_sptr

        Return a shared_ptr to a new instance of ra_blocks::vector_power.

        To avoid accidental use of raw pointers, ra_blocks::vector_power's constructor is in a private implementation class. ra_blocks::vector_power::make is the public interface for creating new instances.

        Params: (vecsize, nstream)
        """
        return _ra_blocks_swig.vector_power_make(*args, **kwargs)

    make = staticmethod(make)
    def set_positions(self, *args, **kwargs):
        """
        set_positions(vector_power self, std::vector< int,std::allocator< int > > const & begins, std::vector< int,std::allocator< int > > const & ends)

        Params: (begins, ends)
        """
        return _ra_blocks_swig.vector_power_set_positions(self, *args, **kwargs)

    __swig_destroy__ = _ra_blocks_swig.delete_vector_power
    __del__ = lambda self : None;
vector_power_swigregister = _ra_blocks_swig.vector_power_swigregister
vector_power_swigregister(vector_power)

def vector_power_make(*args, **kwargs):
  """
    vector_power_make(int vecsize, int nstream) -> vector_power_sptr

    Return a shared_ptr to a new instance of ra_blocks::vector_power.

    To avoid accidental use of raw pointers, ra_blocks::vector_power's constructor is in a private implementation class. ra_blocks::vector_power::make is the public interface for creating new instances.

    Params: (vecsize, nstream)
    """
  return _ra_blocks_swig.vector_power_make(*args, **kwargs)

class vector_power_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ra_blocks::vector_power)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ra_blocks::vector_power)> self) -> vector_power_sptr
        __init__(boost::shared_ptr<(gr::ra_blocks::vector_power)> self, vector_power p) -> vector_power_sptr
        """
        this = _ra_blocks_swig.new_vector_power_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(vector_power_sptr self) -> vector_power"""
        return _ra_blocks_swig.vector_power_sptr___deref__(self)

    __swig_destroy__ = _ra_blocks_swig.delete_vector_power_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(vector_power_sptr self, int vecsize, int nstream) -> vector_power_sptr

        Return a shared_ptr to a new instance of ra_blocks::vector_power.

        To avoid accidental use of raw pointers, ra_blocks::vector_power's constructor is in a private implementation class. ra_blocks::vector_power::make is the public interface for creating new instances.

        Params: (vecsize, nstream)
        """
        return _ra_blocks_swig.vector_power_sptr_make(self, *args, **kwargs)

    def set_positions(self, *args, **kwargs):
        """
        set_positions(vector_power_sptr self, std::vector< int,std::allocator< int > > const & begins, std::vector< int,std::allocator< int > > const & ends)

        Params: (begins, ends)
        """
        return _ra_blocks_swig.vector_power_sptr_set_positions(self, *args, **kwargs)

    def history(self):
        """history(vector_power_sptr self) -> unsigned int"""
        return _ra_blocks_swig.vector_power_sptr_history(self)

    def output_multiple(self):
        """output_multiple(vector_power_sptr self) -> int"""
        return _ra_blocks_swig.vector_power_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(vector_power_sptr self) -> double"""
        return _ra_blocks_swig.vector_power_sptr_relative_rate(self)

    def start(self):
        """start(vector_power_sptr self) -> bool"""
        return _ra_blocks_swig.vector_power_sptr_start(self)

    def stop(self):
        """stop(vector_power_sptr self) -> bool"""
        return _ra_blocks_swig.vector_power_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(vector_power_sptr self, unsigned int which_input) -> uint64_t"""
        return _ra_blocks_swig.vector_power_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(vector_power_sptr self, unsigned int which_output) -> uint64_t"""
        return _ra_blocks_swig.vector_power_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(vector_power_sptr self) -> int"""
        return _ra_blocks_swig.vector_power_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(vector_power_sptr self, int m)"""
        return _ra_blocks_swig.vector_power_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(vector_power_sptr self)"""
        return _ra_blocks_swig.vector_power_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(vector_power_sptr self) -> bool"""
        return _ra_blocks_swig.vector_power_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(vector_power_sptr self, int i) -> long"""
        return _ra_blocks_swig.vector_power_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(vector_power_sptr self, long max_output_buffer)
        set_max_output_buffer(vector_power_sptr self, int port, long max_output_buffer)
        """
        return _ra_blocks_swig.vector_power_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(vector_power_sptr self, int i) -> long"""
        return _ra_blocks_swig.vector_power_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(vector_power_sptr self, long min_output_buffer)
        set_min_output_buffer(vector_power_sptr self, int port, long min_output_buffer)
        """
        return _ra_blocks_swig.vector_power_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(vector_power_sptr self) -> float"""
        return _ra_blocks_swig.vector_power_sptr_pc_noutput_items(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(vector_power_sptr self) -> float"""
        return _ra_blocks_swig.vector_power_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(vector_power_sptr self) -> float"""
        return _ra_blocks_swig.vector_power_sptr_pc_nproduced(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(vector_power_sptr self) -> float"""
        return _ra_blocks_swig.vector_power_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(vector_power_sptr self, int which) -> float
        pc_input_buffers_full(vector_power_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.vector_power_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(vector_power_sptr self, int which) -> float
        pc_input_buffers_full_var(vector_power_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.vector_power_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(vector_power_sptr self, int which) -> float
        pc_output_buffers_full(vector_power_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.vector_power_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(vector_power_sptr self, int which) -> float
        pc_output_buffers_full_var(vector_power_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.vector_power_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(vector_power_sptr self) -> float"""
        return _ra_blocks_swig.vector_power_sptr_pc_work_time(self)

    def pc_work_time_var(self):
        """pc_work_time_var(vector_power_sptr self) -> float"""
        return _ra_blocks_swig.vector_power_sptr_pc_work_time_var(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(vector_power_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ra_blocks_swig.vector_power_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(vector_power_sptr self)"""
        return _ra_blocks_swig.vector_power_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(vector_power_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ra_blocks_swig.vector_power_sptr_processor_affinity(self)

    def detail(self):
        """detail(vector_power_sptr self) -> gr_block_detail_sptr"""
        return _ra_blocks_swig.vector_power_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(vector_power_sptr self, gr_block_detail_sptr detail)"""
        return _ra_blocks_swig.vector_power_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(vector_power_sptr self) -> std::string"""
        return _ra_blocks_swig.vector_power_sptr_name(self)

    def symbol_name(self):
        """symbol_name(vector_power_sptr self) -> std::string"""
        return _ra_blocks_swig.vector_power_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(vector_power_sptr self) -> gr_io_signature_sptr"""
        return _ra_blocks_swig.vector_power_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(vector_power_sptr self) -> gr_io_signature_sptr"""
        return _ra_blocks_swig.vector_power_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(vector_power_sptr self) -> long"""
        return _ra_blocks_swig.vector_power_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(vector_power_sptr self) -> gr_basic_block_sptr"""
        return _ra_blocks_swig.vector_power_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(vector_power_sptr self, int ninputs, int noutputs) -> bool"""
        return _ra_blocks_swig.vector_power_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(vector_power_sptr self) -> std::string"""
        return _ra_blocks_swig.vector_power_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(vector_power_sptr self, std::string name)"""
        return _ra_blocks_swig.vector_power_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(vector_power_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ra_blocks_swig.vector_power_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(vector_power_sptr self) -> swig_int_ptr"""
        return _ra_blocks_swig.vector_power_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(vector_power_sptr self) -> swig_int_ptr"""
        return _ra_blocks_swig.vector_power_sptr_message_ports_out(self)

vector_power_sptr_swigregister = _ra_blocks_swig.vector_power_sptr_swigregister
vector_power_sptr_swigregister(vector_power_sptr)

vector_power_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
vector_power = vector_power.make;

class synch_folder(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int outvecsize, int folding) -> synch_folder_sptr

        Return a shared_ptr to a new instance of ra_blocks::synch_folder.

        To avoid accidental use of raw pointers, ra_blocks::synch_folder's constructor is in a private implementation class. ra_blocks::synch_folder::make is the public interface for creating new instances.

        Params: (outvecsize, folding)
        """
        return _ra_blocks_swig.synch_folder_make(*args, **kwargs)

    make = staticmethod(make)
    def set_folding(self, *args, **kwargs):
        """
        set_folding(synch_folder self, int folding)

        Params: (folding)
        """
        return _ra_blocks_swig.synch_folder_set_folding(self, *args, **kwargs)

    __swig_destroy__ = _ra_blocks_swig.delete_synch_folder
    __del__ = lambda self : None;
synch_folder_swigregister = _ra_blocks_swig.synch_folder_swigregister
synch_folder_swigregister(synch_folder)

def synch_folder_make(*args, **kwargs):
  """
    synch_folder_make(int outvecsize, int folding) -> synch_folder_sptr

    Return a shared_ptr to a new instance of ra_blocks::synch_folder.

    To avoid accidental use of raw pointers, ra_blocks::synch_folder's constructor is in a private implementation class. ra_blocks::synch_folder::make is the public interface for creating new instances.

    Params: (outvecsize, folding)
    """
  return _ra_blocks_swig.synch_folder_make(*args, **kwargs)

class synch_folder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ra_blocks::synch_folder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ra_blocks::synch_folder)> self) -> synch_folder_sptr
        __init__(boost::shared_ptr<(gr::ra_blocks::synch_folder)> self, synch_folder p) -> synch_folder_sptr
        """
        this = _ra_blocks_swig.new_synch_folder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(synch_folder_sptr self) -> synch_folder"""
        return _ra_blocks_swig.synch_folder_sptr___deref__(self)

    __swig_destroy__ = _ra_blocks_swig.delete_synch_folder_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(synch_folder_sptr self, int outvecsize, int folding) -> synch_folder_sptr

        Return a shared_ptr to a new instance of ra_blocks::synch_folder.

        To avoid accidental use of raw pointers, ra_blocks::synch_folder's constructor is in a private implementation class. ra_blocks::synch_folder::make is the public interface for creating new instances.

        Params: (outvecsize, folding)
        """
        return _ra_blocks_swig.synch_folder_sptr_make(self, *args, **kwargs)

    def set_folding(self, *args, **kwargs):
        """
        set_folding(synch_folder_sptr self, int folding)

        Params: (folding)
        """
        return _ra_blocks_swig.synch_folder_sptr_set_folding(self, *args, **kwargs)

    def history(self):
        """history(synch_folder_sptr self) -> unsigned int"""
        return _ra_blocks_swig.synch_folder_sptr_history(self)

    def output_multiple(self):
        """output_multiple(synch_folder_sptr self) -> int"""
        return _ra_blocks_swig.synch_folder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(synch_folder_sptr self) -> double"""
        return _ra_blocks_swig.synch_folder_sptr_relative_rate(self)

    def start(self):
        """start(synch_folder_sptr self) -> bool"""
        return _ra_blocks_swig.synch_folder_sptr_start(self)

    def stop(self):
        """stop(synch_folder_sptr self) -> bool"""
        return _ra_blocks_swig.synch_folder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(synch_folder_sptr self, unsigned int which_input) -> uint64_t"""
        return _ra_blocks_swig.synch_folder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(synch_folder_sptr self, unsigned int which_output) -> uint64_t"""
        return _ra_blocks_swig.synch_folder_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(synch_folder_sptr self) -> int"""
        return _ra_blocks_swig.synch_folder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(synch_folder_sptr self, int m)"""
        return _ra_blocks_swig.synch_folder_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(synch_folder_sptr self)"""
        return _ra_blocks_swig.synch_folder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(synch_folder_sptr self) -> bool"""
        return _ra_blocks_swig.synch_folder_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(synch_folder_sptr self, int i) -> long"""
        return _ra_blocks_swig.synch_folder_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(synch_folder_sptr self, long max_output_buffer)
        set_max_output_buffer(synch_folder_sptr self, int port, long max_output_buffer)
        """
        return _ra_blocks_swig.synch_folder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(synch_folder_sptr self, int i) -> long"""
        return _ra_blocks_swig.synch_folder_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(synch_folder_sptr self, long min_output_buffer)
        set_min_output_buffer(synch_folder_sptr self, int port, long min_output_buffer)
        """
        return _ra_blocks_swig.synch_folder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(synch_folder_sptr self) -> float"""
        return _ra_blocks_swig.synch_folder_sptr_pc_noutput_items(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(synch_folder_sptr self) -> float"""
        return _ra_blocks_swig.synch_folder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(synch_folder_sptr self) -> float"""
        return _ra_blocks_swig.synch_folder_sptr_pc_nproduced(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(synch_folder_sptr self) -> float"""
        return _ra_blocks_swig.synch_folder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(synch_folder_sptr self, int which) -> float
        pc_input_buffers_full(synch_folder_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.synch_folder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(synch_folder_sptr self, int which) -> float
        pc_input_buffers_full_var(synch_folder_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.synch_folder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(synch_folder_sptr self, int which) -> float
        pc_output_buffers_full(synch_folder_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.synch_folder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(synch_folder_sptr self, int which) -> float
        pc_output_buffers_full_var(synch_folder_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.synch_folder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(synch_folder_sptr self) -> float"""
        return _ra_blocks_swig.synch_folder_sptr_pc_work_time(self)

    def pc_work_time_var(self):
        """pc_work_time_var(synch_folder_sptr self) -> float"""
        return _ra_blocks_swig.synch_folder_sptr_pc_work_time_var(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(synch_folder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ra_blocks_swig.synch_folder_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(synch_folder_sptr self)"""
        return _ra_blocks_swig.synch_folder_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(synch_folder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ra_blocks_swig.synch_folder_sptr_processor_affinity(self)

    def detail(self):
        """detail(synch_folder_sptr self) -> gr_block_detail_sptr"""
        return _ra_blocks_swig.synch_folder_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(synch_folder_sptr self, gr_block_detail_sptr detail)"""
        return _ra_blocks_swig.synch_folder_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(synch_folder_sptr self) -> std::string"""
        return _ra_blocks_swig.synch_folder_sptr_name(self)

    def symbol_name(self):
        """symbol_name(synch_folder_sptr self) -> std::string"""
        return _ra_blocks_swig.synch_folder_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(synch_folder_sptr self) -> gr_io_signature_sptr"""
        return _ra_blocks_swig.synch_folder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(synch_folder_sptr self) -> gr_io_signature_sptr"""
        return _ra_blocks_swig.synch_folder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(synch_folder_sptr self) -> long"""
        return _ra_blocks_swig.synch_folder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(synch_folder_sptr self) -> gr_basic_block_sptr"""
        return _ra_blocks_swig.synch_folder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(synch_folder_sptr self, int ninputs, int noutputs) -> bool"""
        return _ra_blocks_swig.synch_folder_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(synch_folder_sptr self) -> std::string"""
        return _ra_blocks_swig.synch_folder_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(synch_folder_sptr self, std::string name)"""
        return _ra_blocks_swig.synch_folder_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(synch_folder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ra_blocks_swig.synch_folder_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(synch_folder_sptr self) -> swig_int_ptr"""
        return _ra_blocks_swig.synch_folder_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(synch_folder_sptr self) -> swig_int_ptr"""
        return _ra_blocks_swig.synch_folder_sptr_message_ports_out(self)

synch_folder_sptr_swigregister = _ra_blocks_swig.synch_folder_sptr_swigregister
synch_folder_sptr_swigregister(synch_folder_sptr)

synch_folder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
synch_folder = synch_folder.make;

class synch_detect(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decim, float hval, float lval) -> synch_detect_sptr

        Return a shared_ptr to a new instance of ra_blocks::synch_detect.

        To avoid accidental use of raw pointers, ra_blocks::synch_detect's constructor is in a private implementation class. ra_blocks::synch_detect::make is the public interface for creating new instances.

        Params: (decim, hval, lval)
        """
        return _ra_blocks_swig.synch_detect_make(*args, **kwargs)

    make = staticmethod(make)
    def set_decim(self, *args, **kwargs):
        """
        set_decim(synch_detect self, int decim)

        Params: (decim)
        """
        return _ra_blocks_swig.synch_detect_set_decim(self, *args, **kwargs)

    def set_hval(self, *args, **kwargs):
        """
        set_hval(synch_detect self, float hval)

        Params: (hval)
        """
        return _ra_blocks_swig.synch_detect_set_hval(self, *args, **kwargs)

    def set_lval(self, *args, **kwargs):
        """
        set_lval(synch_detect self, float lval)

        Params: (lval)
        """
        return _ra_blocks_swig.synch_detect_set_lval(self, *args, **kwargs)

    __swig_destroy__ = _ra_blocks_swig.delete_synch_detect
    __del__ = lambda self : None;
synch_detect_swigregister = _ra_blocks_swig.synch_detect_swigregister
synch_detect_swigregister(synch_detect)

def synch_detect_make(*args, **kwargs):
  """
    synch_detect_make(int decim, float hval, float lval) -> synch_detect_sptr

    Return a shared_ptr to a new instance of ra_blocks::synch_detect.

    To avoid accidental use of raw pointers, ra_blocks::synch_detect's constructor is in a private implementation class. ra_blocks::synch_detect::make is the public interface for creating new instances.

    Params: (decim, hval, lval)
    """
  return _ra_blocks_swig.synch_detect_make(*args, **kwargs)

class synch_detect_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ra_blocks::synch_detect)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ra_blocks::synch_detect)> self) -> synch_detect_sptr
        __init__(boost::shared_ptr<(gr::ra_blocks::synch_detect)> self, synch_detect p) -> synch_detect_sptr
        """
        this = _ra_blocks_swig.new_synch_detect_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(synch_detect_sptr self) -> synch_detect"""
        return _ra_blocks_swig.synch_detect_sptr___deref__(self)

    __swig_destroy__ = _ra_blocks_swig.delete_synch_detect_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(synch_detect_sptr self, int decim, float hval, float lval) -> synch_detect_sptr

        Return a shared_ptr to a new instance of ra_blocks::synch_detect.

        To avoid accidental use of raw pointers, ra_blocks::synch_detect's constructor is in a private implementation class. ra_blocks::synch_detect::make is the public interface for creating new instances.

        Params: (decim, hval, lval)
        """
        return _ra_blocks_swig.synch_detect_sptr_make(self, *args, **kwargs)

    def set_decim(self, *args, **kwargs):
        """
        set_decim(synch_detect_sptr self, int decim)

        Params: (decim)
        """
        return _ra_blocks_swig.synch_detect_sptr_set_decim(self, *args, **kwargs)

    def set_hval(self, *args, **kwargs):
        """
        set_hval(synch_detect_sptr self, float hval)

        Params: (hval)
        """
        return _ra_blocks_swig.synch_detect_sptr_set_hval(self, *args, **kwargs)

    def set_lval(self, *args, **kwargs):
        """
        set_lval(synch_detect_sptr self, float lval)

        Params: (lval)
        """
        return _ra_blocks_swig.synch_detect_sptr_set_lval(self, *args, **kwargs)

    def history(self):
        """history(synch_detect_sptr self) -> unsigned int"""
        return _ra_blocks_swig.synch_detect_sptr_history(self)

    def output_multiple(self):
        """output_multiple(synch_detect_sptr self) -> int"""
        return _ra_blocks_swig.synch_detect_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(synch_detect_sptr self) -> double"""
        return _ra_blocks_swig.synch_detect_sptr_relative_rate(self)

    def start(self):
        """start(synch_detect_sptr self) -> bool"""
        return _ra_blocks_swig.synch_detect_sptr_start(self)

    def stop(self):
        """stop(synch_detect_sptr self) -> bool"""
        return _ra_blocks_swig.synch_detect_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(synch_detect_sptr self, unsigned int which_input) -> uint64_t"""
        return _ra_blocks_swig.synch_detect_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(synch_detect_sptr self, unsigned int which_output) -> uint64_t"""
        return _ra_blocks_swig.synch_detect_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(synch_detect_sptr self) -> int"""
        return _ra_blocks_swig.synch_detect_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(synch_detect_sptr self, int m)"""
        return _ra_blocks_swig.synch_detect_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(synch_detect_sptr self)"""
        return _ra_blocks_swig.synch_detect_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(synch_detect_sptr self) -> bool"""
        return _ra_blocks_swig.synch_detect_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(synch_detect_sptr self, int i) -> long"""
        return _ra_blocks_swig.synch_detect_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(synch_detect_sptr self, long max_output_buffer)
        set_max_output_buffer(synch_detect_sptr self, int port, long max_output_buffer)
        """
        return _ra_blocks_swig.synch_detect_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(synch_detect_sptr self, int i) -> long"""
        return _ra_blocks_swig.synch_detect_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(synch_detect_sptr self, long min_output_buffer)
        set_min_output_buffer(synch_detect_sptr self, int port, long min_output_buffer)
        """
        return _ra_blocks_swig.synch_detect_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(synch_detect_sptr self) -> float"""
        return _ra_blocks_swig.synch_detect_sptr_pc_noutput_items(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(synch_detect_sptr self) -> float"""
        return _ra_blocks_swig.synch_detect_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(synch_detect_sptr self) -> float"""
        return _ra_blocks_swig.synch_detect_sptr_pc_nproduced(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(synch_detect_sptr self) -> float"""
        return _ra_blocks_swig.synch_detect_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(synch_detect_sptr self, int which) -> float
        pc_input_buffers_full(synch_detect_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.synch_detect_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(synch_detect_sptr self, int which) -> float
        pc_input_buffers_full_var(synch_detect_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.synch_detect_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(synch_detect_sptr self, int which) -> float
        pc_output_buffers_full(synch_detect_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.synch_detect_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(synch_detect_sptr self, int which) -> float
        pc_output_buffers_full_var(synch_detect_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.synch_detect_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(synch_detect_sptr self) -> float"""
        return _ra_blocks_swig.synch_detect_sptr_pc_work_time(self)

    def pc_work_time_var(self):
        """pc_work_time_var(synch_detect_sptr self) -> float"""
        return _ra_blocks_swig.synch_detect_sptr_pc_work_time_var(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(synch_detect_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ra_blocks_swig.synch_detect_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(synch_detect_sptr self)"""
        return _ra_blocks_swig.synch_detect_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(synch_detect_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ra_blocks_swig.synch_detect_sptr_processor_affinity(self)

    def detail(self):
        """detail(synch_detect_sptr self) -> gr_block_detail_sptr"""
        return _ra_blocks_swig.synch_detect_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(synch_detect_sptr self, gr_block_detail_sptr detail)"""
        return _ra_blocks_swig.synch_detect_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(synch_detect_sptr self) -> std::string"""
        return _ra_blocks_swig.synch_detect_sptr_name(self)

    def symbol_name(self):
        """symbol_name(synch_detect_sptr self) -> std::string"""
        return _ra_blocks_swig.synch_detect_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(synch_detect_sptr self) -> gr_io_signature_sptr"""
        return _ra_blocks_swig.synch_detect_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(synch_detect_sptr self) -> gr_io_signature_sptr"""
        return _ra_blocks_swig.synch_detect_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(synch_detect_sptr self) -> long"""
        return _ra_blocks_swig.synch_detect_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(synch_detect_sptr self) -> gr_basic_block_sptr"""
        return _ra_blocks_swig.synch_detect_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(synch_detect_sptr self, int ninputs, int noutputs) -> bool"""
        return _ra_blocks_swig.synch_detect_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(synch_detect_sptr self) -> std::string"""
        return _ra_blocks_swig.synch_detect_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(synch_detect_sptr self, std::string name)"""
        return _ra_blocks_swig.synch_detect_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(synch_detect_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ra_blocks_swig.synch_detect_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(synch_detect_sptr self) -> swig_int_ptr"""
        return _ra_blocks_swig.synch_detect_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(synch_detect_sptr self) -> swig_int_ptr"""
        return _ra_blocks_swig.synch_detect_sptr_message_ports_out(self)

synch_detect_sptr_swigregister = _ra_blocks_swig.synch_detect_sptr_swigregister
synch_detect_sptr_swigregister(synch_detect_sptr)

synch_detect_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
synch_detect = synch_detect.make;

class synch_clock(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int clkdiv, float hval, float lval) -> synch_clock_sptr

        Return a shared_ptr to a new instance of ra_blocks::synch_clock.

        To avoid accidental use of raw pointers, ra_blocks::synch_clock's constructor is in a private implementation class. ra_blocks::synch_clock::make is the public interface for creating new instances.

        Params: (clkdiv, hval, lval)
        """
        return _ra_blocks_swig.synch_clock_make(*args, **kwargs)

    make = staticmethod(make)
    def set_clkdiv(self, *args, **kwargs):
        """
        set_clkdiv(synch_clock self, int clkdiv)

        Params: (clkdiv)
        """
        return _ra_blocks_swig.synch_clock_set_clkdiv(self, *args, **kwargs)

    def set_hval(self, *args, **kwargs):
        """
        set_hval(synch_clock self, float hval)

        Params: (hval)
        """
        return _ra_blocks_swig.synch_clock_set_hval(self, *args, **kwargs)

    def set_lval(self, *args, **kwargs):
        """
        set_lval(synch_clock self, float lval)

        Params: (lval)
        """
        return _ra_blocks_swig.synch_clock_set_lval(self, *args, **kwargs)

    __swig_destroy__ = _ra_blocks_swig.delete_synch_clock
    __del__ = lambda self : None;
synch_clock_swigregister = _ra_blocks_swig.synch_clock_swigregister
synch_clock_swigregister(synch_clock)

def synch_clock_make(*args, **kwargs):
  """
    synch_clock_make(int clkdiv, float hval, float lval) -> synch_clock_sptr

    Return a shared_ptr to a new instance of ra_blocks::synch_clock.

    To avoid accidental use of raw pointers, ra_blocks::synch_clock's constructor is in a private implementation class. ra_blocks::synch_clock::make is the public interface for creating new instances.

    Params: (clkdiv, hval, lval)
    """
  return _ra_blocks_swig.synch_clock_make(*args, **kwargs)

class synch_clock_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ra_blocks::synch_clock)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ra_blocks::synch_clock)> self) -> synch_clock_sptr
        __init__(boost::shared_ptr<(gr::ra_blocks::synch_clock)> self, synch_clock p) -> synch_clock_sptr
        """
        this = _ra_blocks_swig.new_synch_clock_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(synch_clock_sptr self) -> synch_clock"""
        return _ra_blocks_swig.synch_clock_sptr___deref__(self)

    __swig_destroy__ = _ra_blocks_swig.delete_synch_clock_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(synch_clock_sptr self, int clkdiv, float hval, float lval) -> synch_clock_sptr

        Return a shared_ptr to a new instance of ra_blocks::synch_clock.

        To avoid accidental use of raw pointers, ra_blocks::synch_clock's constructor is in a private implementation class. ra_blocks::synch_clock::make is the public interface for creating new instances.

        Params: (clkdiv, hval, lval)
        """
        return _ra_blocks_swig.synch_clock_sptr_make(self, *args, **kwargs)

    def set_clkdiv(self, *args, **kwargs):
        """
        set_clkdiv(synch_clock_sptr self, int clkdiv)

        Params: (clkdiv)
        """
        return _ra_blocks_swig.synch_clock_sptr_set_clkdiv(self, *args, **kwargs)

    def set_hval(self, *args, **kwargs):
        """
        set_hval(synch_clock_sptr self, float hval)

        Params: (hval)
        """
        return _ra_blocks_swig.synch_clock_sptr_set_hval(self, *args, **kwargs)

    def set_lval(self, *args, **kwargs):
        """
        set_lval(synch_clock_sptr self, float lval)

        Params: (lval)
        """
        return _ra_blocks_swig.synch_clock_sptr_set_lval(self, *args, **kwargs)

    def history(self):
        """history(synch_clock_sptr self) -> unsigned int"""
        return _ra_blocks_swig.synch_clock_sptr_history(self)

    def output_multiple(self):
        """output_multiple(synch_clock_sptr self) -> int"""
        return _ra_blocks_swig.synch_clock_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(synch_clock_sptr self) -> double"""
        return _ra_blocks_swig.synch_clock_sptr_relative_rate(self)

    def start(self):
        """start(synch_clock_sptr self) -> bool"""
        return _ra_blocks_swig.synch_clock_sptr_start(self)

    def stop(self):
        """stop(synch_clock_sptr self) -> bool"""
        return _ra_blocks_swig.synch_clock_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(synch_clock_sptr self, unsigned int which_input) -> uint64_t"""
        return _ra_blocks_swig.synch_clock_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(synch_clock_sptr self, unsigned int which_output) -> uint64_t"""
        return _ra_blocks_swig.synch_clock_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(synch_clock_sptr self) -> int"""
        return _ra_blocks_swig.synch_clock_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(synch_clock_sptr self, int m)"""
        return _ra_blocks_swig.synch_clock_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(synch_clock_sptr self)"""
        return _ra_blocks_swig.synch_clock_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(synch_clock_sptr self) -> bool"""
        return _ra_blocks_swig.synch_clock_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(synch_clock_sptr self, int i) -> long"""
        return _ra_blocks_swig.synch_clock_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(synch_clock_sptr self, long max_output_buffer)
        set_max_output_buffer(synch_clock_sptr self, int port, long max_output_buffer)
        """
        return _ra_blocks_swig.synch_clock_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(synch_clock_sptr self, int i) -> long"""
        return _ra_blocks_swig.synch_clock_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(synch_clock_sptr self, long min_output_buffer)
        set_min_output_buffer(synch_clock_sptr self, int port, long min_output_buffer)
        """
        return _ra_blocks_swig.synch_clock_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(synch_clock_sptr self) -> float"""
        return _ra_blocks_swig.synch_clock_sptr_pc_noutput_items(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(synch_clock_sptr self) -> float"""
        return _ra_blocks_swig.synch_clock_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(synch_clock_sptr self) -> float"""
        return _ra_blocks_swig.synch_clock_sptr_pc_nproduced(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(synch_clock_sptr self) -> float"""
        return _ra_blocks_swig.synch_clock_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(synch_clock_sptr self, int which) -> float
        pc_input_buffers_full(synch_clock_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.synch_clock_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(synch_clock_sptr self, int which) -> float
        pc_input_buffers_full_var(synch_clock_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.synch_clock_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(synch_clock_sptr self, int which) -> float
        pc_output_buffers_full(synch_clock_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.synch_clock_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(synch_clock_sptr self, int which) -> float
        pc_output_buffers_full_var(synch_clock_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _ra_blocks_swig.synch_clock_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(synch_clock_sptr self) -> float"""
        return _ra_blocks_swig.synch_clock_sptr_pc_work_time(self)

    def pc_work_time_var(self):
        """pc_work_time_var(synch_clock_sptr self) -> float"""
        return _ra_blocks_swig.synch_clock_sptr_pc_work_time_var(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(synch_clock_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ra_blocks_swig.synch_clock_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(synch_clock_sptr self)"""
        return _ra_blocks_swig.synch_clock_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(synch_clock_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ra_blocks_swig.synch_clock_sptr_processor_affinity(self)

    def detail(self):
        """detail(synch_clock_sptr self) -> gr_block_detail_sptr"""
        return _ra_blocks_swig.synch_clock_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(synch_clock_sptr self, gr_block_detail_sptr detail)"""
        return _ra_blocks_swig.synch_clock_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(synch_clock_sptr self) -> std::string"""
        return _ra_blocks_swig.synch_clock_sptr_name(self)

    def symbol_name(self):
        """symbol_name(synch_clock_sptr self) -> std::string"""
        return _ra_blocks_swig.synch_clock_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(synch_clock_sptr self) -> gr_io_signature_sptr"""
        return _ra_blocks_swig.synch_clock_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(synch_clock_sptr self) -> gr_io_signature_sptr"""
        return _ra_blocks_swig.synch_clock_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(synch_clock_sptr self) -> long"""
        return _ra_blocks_swig.synch_clock_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(synch_clock_sptr self) -> gr_basic_block_sptr"""
        return _ra_blocks_swig.synch_clock_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(synch_clock_sptr self, int ninputs, int noutputs) -> bool"""
        return _ra_blocks_swig.synch_clock_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(synch_clock_sptr self) -> std::string"""
        return _ra_blocks_swig.synch_clock_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(synch_clock_sptr self, std::string name)"""
        return _ra_blocks_swig.synch_clock_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(synch_clock_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ra_blocks_swig.synch_clock_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(synch_clock_sptr self) -> swig_int_ptr"""
        return _ra_blocks_swig.synch_clock_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(synch_clock_sptr self) -> swig_int_ptr"""
        return _ra_blocks_swig.synch_clock_sptr_message_ports_out(self)

synch_clock_sptr_swigregister = _ra_blocks_swig.synch_clock_sptr_swigregister
synch_clock_sptr_swigregister(synch_clock_sptr)

synch_clock_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
synch_clock = synch_clock.make;



